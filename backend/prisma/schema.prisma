// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
  VOLUNTEER
}

model User {
  id        Int       @id @default(autoincrement())
  username  String?   @unique
  fullname  String?
  email     String    @unique
  birthDate DateTime?
  createdAt DateTime  @default(now())
  role      UserRole?
  address   String? //
  phone     String? //
  skills    String?
  categories String[] @default([])

  // Владелец компании (может быть null если пользователь не владелец)
  ownedCompany Company? @relation("CompanyOwner")

  // Член компании (может быть null если пользователь не в компании)
  memberCompany Company? @relation("CompanyMembers", fields: [companyId], references: [id])
  companyId     Int?

  otpList  Otp[]
  sessions Session[]

  chats       ChatToUser[]
  messages    Message[]    @relation("UserMessages")
  chatReviews ChatReview[]
}

model Otp {
  id      Int     @id @default(autoincrement())
  code    Int
  expired Boolean @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@unique([code, userId])
}

model Session {
  id        Int     @id @default(autoincrement())
  state     Boolean @default(true)
  jwt       String
  userAgent String
  ip        String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  imgUrl      String?

  // Владелец компании (один пользователь)
  owner   User @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId Int  @unique

  members User[] @relation("CompanyMembers")

  links CompanyLink[]

  chats Chat[] @relation()
}

model CompanyLink {
  id   Int    @id @default(autoincrement())
  link String @unique

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

model Chat {
  id Int @id @default(autoincrement())

  isClosed Boolean      @default(false)
  users    ChatToUser[]
  messages Message[]    @relation("ChatMessages")

  companyId Int?
  company  Company? @relation(fields: [companyId], references: [id])

  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt()

  reviews ChatReview[] @relation()
}

model ChatToUser {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  @@unique([chatId, userId])
}

enum MessageType {
  STATUS
  STATUS_LOADING
  DEFAULT
  SELECT_ORGANIZATION
}

model Message {
  id      Int         @id @default(autoincrement())
  content Json
  type    MessageType @default(DEFAULT)

  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt()

  chatId Int
  chat   Chat @relation("ChatMessages", fields: [chatId], references: [id])

  userId Int
  user   User @relation("UserMessages", fields: [userId], references: [id])
}

// model MessageToChat {
//   id   Int    @id @default(autoincrement())

//   message Message @relation(fields: [messageId], references: [id])
//   messageId Int

//   chat Chat @relation(fields: [chatId], references: [id])
//   chatId Int

//   @@unique([chatId, userId])
// }

model ChatReview {
  id     Int     @id @default(autoincrement())
  rating Int
  text   String?

  createdOn DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id])

  @@unique([chatId, userId])
}
